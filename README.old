YATT -- Yet Another Typing Trainer

* はじめに* YATT のなりたち

YATT は ueno の gtr に触発された私 hkim@melt.kyutech.ac.jp の最初の 
ruby/tk プログラムである。gtr の 1/10 のコード量で 2 倍の機能、melt に
集う迷える子羊ちゃんの興味を刺激することを目標に作成した。

2002.06.11 現在、gtr-0.3.0 のソース部分は約 200KB、YATT は 19KB だ。ス
コアに応じての細かいメッセージなどはまだ未実装だが、スピードメータ、ソー
スコード認証、インクリメンタルステータス表示、リアルタイムランキングボー
ド、ボーナス、スコアのグラフィクス表示、初期化ファイル、コマンドライン
引数、強制パラメータ指定などの機能がある。

プラットフォームの違いを ruby が吸収してくれるため、YATT はソースコー
ドを編集せずに linux/windows/macintosh 上で同様に動作する。後で述べる
ソースコード認証の部分は C で書いてあり、かつ、hkim@melt は Windows の 
C コンパイラを持っていないし、買う気もないので、Windows からではリアル
タイムタイピングコンテストには参加できない。ま、運命としてあきらめれ。

最初、プログラムの名前は trainer.rb だった。しばらくして trainer にな
り、YATT(Yet Another Typing Trainer) に変更した。もっと短かく、yt では
どうだろう？ ま、おいおい考えよう。


* YATT の構造

YATT は次の３つのプログラムからできている。

** yatt.rb 
YATT の中心。ruby のコード。21KB。単独でも機能するが、そうして起動し
た場合、タイピングコンテストに参加できない。

** ttserv
リアルタイムランキング機能のバックエンドサーバ。ruby のコード。認証の
片棒を担ぐので、非公開。3KB。 

** ttbind 
リアルタイムランキング機能のフロントエンド。ttserv の状態チェック、ラ
ンキングデータの保存/読み込みを行う。仕事の内容上、非公開。3KB。

ソースコードの合計サイズは目標の 20KB より大きくなってしまったが、ま、
ええだろ。

プログラムは読みやすさを重視し、やや冗長な部分もある。コメントはほとん
どない。プログラミングの授業では「コメント、コメント」とうるさく言われ
ることもあると思うが、hkim@melt はまったくそう思わない。汚いコードを書
き、コメントでお茶を濁すより、コメントなくてもすらすら読めるコードを書
くよう心掛けるべきと思うぞ。

* 機能の紹介

** スピードメータ
ほとんどジョーク。スピードメータを気にしてはレースに勝てない。

** リアルタイムランキングボード
コンペに参加したユーザのスコア上位 n 名のリストを表示する。表示は m 秒
ごとに更新される。ユーザごとのベストスコアはサーバ上に記録される。

** ソースコード認証
改変したソースからの成績提出を禁止する機能(2004.05 停止中)

** インクリメンタルステータス表示
正確にタイプできたキーの数、そうでないキーの数をキーの種類ごとに棒グラ
フ表示する。練習を連続するとデータは積算される。

** スコア表示
今日のスコアと、これまでのスコアを別ウィンドウに表示する。

** パラメータ設定
初期化ファイル、コマンドライン引数、admin ファイルをこの順に読んでプロ
グラムのパラメータを設定する。リテラシー授業用として、timeout、
runnable_before オプションを作成。

* 開発の歴史

** 2002.05.21 
プログラム作成開始。

** 2002.05.28 
「プログラムは2度作れ」の格言にしたがい、ほぼスクラッチから書き直し。
書き直しの要点は、次の三つ。

*** class を積極的に用いたプログラミング。
*** 経過時間(残り時間)をグラフィクス表示。
*** リアルタイム成績表示メカニズムの導入。

** 2002.05.30 
リアルタイム成績表示。

** 2002.06.01 
インクリメンタル結果棒グラフ。

** 2002.06.06
ソースコード認証。

** 2002.06.08
だんだん ruby の書き方(と Tk の使い方)がわかってきた。この時点でバージョ
ン 0.4.4(このファイルの一番下、バージョンナンバの付け方参照)だが、
1.0.0 にしてもいいかな。ま、もう少し、バグ出ししよう。

** 2002.06.10
手抜きスピードメータ。

** 2002.06.11
マルチプラットフォーム化。と言っても、単純に文字列で渡していたファイル
名をラッパー関数通すようにしただけだ。これにて ruby のインストールされ
た windows でも動くようになった。

* 動作に必要なもの

** ruby-1.6.7 or newer
ruby-1.6.6 で開発を始めたが、このバージョンの ruby は '!'、'.'、'{' の 
KeyPress イベントがきちんと取得できなかった。これには相当悩んだ。
trainer.rb の最初のバージョンの開発には開発時間の 1/2 がこの問題の解決
に費やされたと言っても過言ではない。

実は問題は解決したのではなく、 woody にあった ruby のソースが 1.6.7 で
あることを発見し、それを tgz からインストールしてみると、問題なくイベ
ントが取れたっつうわけ。

* とりあえず試す
ruby-1.6.7 と ruby/tk ライブラリのインストールを確認し(debian ならruby 
と libtk-rubyパッケージ)、

$ /usr/local/melt/bin/yatt.rb

* yatt をコピーする
/usr/local/melt/bin/yatt と /usr/local/melt/bin/yatt.rb を適当な場所に
コピーすればよい。ソースコードを書き直さなければ、そのままコンペにも参
加できるが、一文字でも yatt.rb を変更するとコンペには参加できなくなる
ので注意。

* オプション
コマンドラインからオプションを取るのはやめてしまった。
代わりに ~/.yatt/config でセットする。

~/.yatt/config の例

#----- ここから ----
# touch_type_trainer init file
# # で始まる行はコメント
# 空行は無視

font helvetica # font を helvetica に
size 16	       # サイズを 16 ポイントに。このメッセージもコメント。

# テキストを自分で用意したものに。
textfile	/home/hkim/develop/touch_type_trainer/LGPL

#--- ここまで ---

そのほか、管理者だけ変更できるオプションも用意している。当然、ソースコー
ドを書き換えれば一般ユーザもパラメータを変更できるようになるが、同時に
コンペには参加できなくなることを覚悟しなさい。

* スコアの計算方法
ソースコードを読まれたし。基本的に、

score=(正確にタイプした数)*(タイプの正しさ)*(タイプのスピード)

で、bonus は時間内に制覇すれば 100 点、時間が 1 秒あまるごとに 50点、
かつ、完璧にタイプすればさらに 300 点を追加。

* メニューの説明
** File
*** New
    テキストを更新。制限時間が半分に短くなる。これ、最初は直すつもりだっ
    たが、タイピング練習の精神を忘れて得点取ることに血眼になるゲスな人
    たちががっかりするよう、機能として認知。
*** Pref
    (未実装、オプションをインタラクティブに変更するつもりだったが、ソー
    スを認証してから行数や文字数を変えられるものなあと、思った時点で開
    発がストップ)
*** Quit
    成績をセーブして終了。

** Misc
*** Sticky
    タイプを間違った個所の赤マークが消えない。
*** Loose
    タイプを間違っても次の文字へ進む。
*** Default
    デフォルト(not Sticky, not Loose)にもどす。
*** Join contest
    オンラインコンテストに参加。ソースコードを改変すると参加できない。
    yatt.rb ではなく、yatt で起動すること。
*** reLoad
    ランキング表を最新のものに。
*** My rank
    コンテストに参加したユーザ中、自分のランキングを表示。
*** Remove me
    ランキング表から自分のエントリーを消す。
*** Speed meter
    char/sec をグラフ表示。グラフ見てたらタイプできないよ。
*** Today's score
    今日のスコアをグラフ表示。
*** total Score
    これまでのスコアをグラフ表示。

** Font
   フォント、サイズを変える。メニューにない組合わせは config ファイル
   で指定せよ。
      
** Help
*** readme
    この文書を表示。日本語表示のため、emacs を呼んでいる(手抜き)。
*** about
    バージョン、コピーライト表示

* TODO
** タイピングの解析
   0.7 の段階では、たんに正誤の数を表示するだけだが、どんなパターンで
   間違うかを記録する。
   
** socket
   送受信のたびにオープン/クローズしているのをやめられないか？

** compe 非開催時の通知
   ping でもして確かめるか。それともタイムアウトをもうけるか。

** ウィンドウのクローズボタンを disable する。
   この方法がわかったら、today's score をセッション終了後に自動的に更
   新する機能をつけよう。

** 誤タイプのカウント
   here を there と打つとエラーは 5 つ、そのすべてが h のエラーとして
   カウントされる。これはあんまりか。

** メニュー
   チェックボックスの方が決定的に良いのもある。

* バージョンナンバの方針

yatt のバージョンナンバは major.minor.revision の形式でつける。

** major は完成品としてまとまったらインクリメント。
** minor は新しい機能を追加したときインクリメント。
** revision は実装の変更、バグフィックスでインクリメント。

バージョン 0.3.6 は、バージョン 0 のソースに 3 つの機能を追加した、6 
つめのリビジョンを意味する。

どの機能が 0.1 分に当たるか、これまではルーズな開発をしていたので忘れ
てしまった。セーブするたび revision をあげていた時期もあったな。今後も
このルーズさが直るかどうかは定かではない。とりあえず、2002.06.11 の最
新バージョンは 0.5.4 である。



Local Variables:
mode: Outline
End:

